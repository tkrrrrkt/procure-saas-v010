---
description: プロジェクトの開発ワークフロー、CI/CD、モニタリング、バッチ処理、スケーリング、データベースパフォーマンスに関するガイドライン。
globs: ["**/*.ts", "**/*.tsx", "**/*.yml", "**/*.yaml", "**/*.md"] # プロジェクト全体に適用 [cite: 5]
alwaysApply: true # 常に適用 [cite: 5]
priority: 5
tags: ["workflow", "devops", "ci-cd", "monitoring"]
version: "1.0.0"
---
# 開発ワークフローと運用規約

## 5. 開発ワークフローと運用

### 5.1. 変更時の考慮事項
- **マルチテナント対応**: 全ての変更はマルチテナント環境での動作を前提とし、テナント間のデータ分離とパフォーマンス影響を考慮すること。 [cite: 11]
- **クラウドサービスとしての運用**: スケーラビリティ、可用性、セキュリティ、監視の観点から、変更がサービス全体に与える影響を常に評価すること。 [cite: 11]
- **既存コードの尊重と拡張**: 既存の共通基盤・セキュリティ基盤のコードを尊重し、拡張性を考慮した変更を行うこと。安易な大規模なリファクタリングは行わないが、提言された改善ポイントへの対応は優先的に実施すること。 [cite: 11]
- **UIとAPIの整合性**: フロントエンドとバックエンドのAPI仕様の整合性を常に確認し、変更がある場合は両方を同期的に更新すること。 [cite: 11]

### 5.2. レビューとコミット
- **コミットメッセージ**: 変更内容を明確に記述したコミットメッセージを記述すること。Conventional Commitsの採用を検討する。 [cite: 11]
- **プルリクエスト**: 機能追加やバグ修正は必ずプルリクエストとして提出し、コードレビューを受けること。レビュー基準は本ルールファイルに記載された規約、セキュリティ、パフォーマンス、可読性などを基準に実施し、相互レビューを徹底すること。 [cite: 11]

### 5.3. 自動化と運用
- **CI/CD**: 自動化されたビルド・テスト・デプロイパイプライン（CI/CD）を早期に導入すること。CI/CDプロセスには、自動テスト実行、テストカバレッジレポート生成、コード品質チェック（ESLint, Prettier）、依存関係の脆弱性スキャン（例: Snyk, Dependabot）を含めること。 [cite: 12]
- **モニタリング・運用機能**: 本番環境での可観測性向上のため、ログの一元管理、メトリクス収集（Prometheusなど）、トレース機能の導入を検討し、アラート設定を適切に行うこと。SSOログイン成功/失敗率、JITプロビジョニングの成功/失敗率、トークンリフレッシュの成功/失敗率など、認証フロー固有のメトリクスを収集・可視化すること。OIDC認証フローの各ステップ（リダイレクト、コールバック、トークン取得）のレイテンシーを監視すること。主要なSSO関連の監査ログが適切に記録され、監視システムと連携されていることを確認すること。ヘルスチェックエンドポイント (`health-check` モジュール) を活用すること。 [cite: 12]
- **バッチ処理**: 大量データ処理が必要な業務（例: 日次/月次集計、定期的なデータ同期）については、非同期バッチ処理の仕組み（例: NestJSのマイクロサービス、キューイングシステム、専用のバッチサービス）を設計・導入すること。 [cite: 12]
- **水平スケーリング**: アプリケーションは水平スケーリングを前提としたステートレスな設計を維持すること。クラウド環境での自動スケーリング設定を考慮し、セッションデータはRedisなどの分散キャッシュに保存すること。 [cite: 12]
- **データベースパフォーマンス**: 大規模データセットを扱う機能については、定期的にデータベースのクエリパフォーマンスを分析し、必要に応じて追加のインデックス、パーティショニング、クエリ最適化を実施すること。 [cite: 12]